data = [0x0, 0x0, 0x58, 0x1, 0x1, 0x58, 0x2, 0x2, 0x58, 0x3, 0x3, 0x58, 0x6, 0x6, 0x58, 0x7, 0x7, 0x58, 0x0, 0x69, 0x38, 0x1, 0x6e, 0x38, 0x2, 0x70, 0x38, 0x3, 0x75, 0x38, 0x6, 0x74, 0x38, 0x7, 0x20, 0x38, 0x0, 0x0, 0xcf, 0x1, 0x0, 0xcf, 0x2, 0x0, 0xcf, 0x3, 0x0, 0xcf, 0x6, 0x0, 0xcf, 0x7, 0x0, 0xcf, 0x0, 0x66, 0x38, 0x1, 0x6c, 0x38, 0x2, 0x61, 0x38, 0x3, 0x67, 0x38, 0x6, 0x3a, 0x38, 0x7, 0x20, 0x38, 0x0, 0x0, 0xcf, 0x1, 0x0, 0xcf, 0x2, 0x0, 0xcf, 0x3, 0x0, 0xcf, 0x6, 0x0, 0xcf, 0x7, 0x0, 0xcf, 0x1, 0x1, 0x58, 0x0, 0x0, 0x8d, 0x0, 0x0, 0x9f, 0x1, 0x1, 0xaa, 0x1, 0x26, 0xd, 0x1f, 0x0, 0xc3, 0x0, 0x0, 0x35, 0x0, 0x0, 0x8a, 0x0, 0x7d, 0xd, 0x12, 0x0, 0x14, 0x0, 0x62, 0x38, 0x1, 0x79, 0x38, 0x2, 0x65, 0x38, 0x3, 0x7e, 0x38, 0x6, 0x7e, 0x38, 0x7, 0x7e, 0x38, 0x0, 0x0, 0xcf, 0x1, 0x0, 0xcf, 0x2, 0x0, 0xcf, 0x3, 0x0, 0xcf, 0x6, 0x0, 0xcf, 0x7, 0x0, 0xcf, 0x0, 0xa, 0x38, 0x0, 0x0, 0xcf, 0x0, 0x0, 0x35, 0x8,
        0x100, 0x38, 0x8, 0xe1, 0xd, 0x19, 0x0, 0xc3, 0x0, 0x0, 0x8a, 0x8, 0x0, 0x80, 0x8, 0x1, 0xfa, 0x13, 0x0, 0x5, 0x0, 0x0, 0x8a, 0x0, 0x7b, 0xd, 0x3, 0x0, 0x2b, 0x0, 0x0, 0x8a, 0x0, 0x67, 0xd, 0x3, 0x0, 0x2b, 0x0, 0x0, 0x8a, 0x0, 0x61, 0xd, 0x3, 0x0, 0x2b, 0x0, 0x0, 0x8a, 0x0, 0x6c, 0xd, 0x3, 0x0, 0x2b, 0x0, 0x0, 0x8a, 0x0, 0x66, 0xd, 0x3, 0x0, 0x2b, 0x9, 0x9, 0x58, 0xa, 0xe1, 0x38, 0x7, 0x9, 0xe6, 0x6, 0xa, 0xe6, 0x6, 0xfb, 0x44, 0x6, 0xff, 0xa3, 0x6, 0x7, 0xa5, 0x3, 0x0, 0x2b, 0x9, 0x1, 0xaa, 0xa, 0x1, 0xaa, 0x9, 0x20, 0xd, 0x2a, 0x0, 0xc3, 0x0, 0x63, 0x38, 0x1, 0x6f, 0x38, 0x2, 0x72, 0x38, 0x3, 0x72, 0x38, 0x6, 0x65, 0x38, 0x7, 0x63, 0x38, 0x0, 0x0, 0xcf, 0x1, 0x0, 0xcf, 0x2, 0x0, 0xcf, 0x3, 0x0, 0xcf, 0x6, 0x0, 0xcf, 0x7, 0x0, 0xcf, 0x0, 0x74, 0x38, 0x1, 0x6c, 0x38, 0x2, 0x79, 0x38, 0x3, 0x21, 0x38, 0x6, 0xa, 0x38, 0x0, 0x0, 0xcf, 0x1, 0x0, 0xcf, 0x2, 0x0, 0xcf, 0x3, 0x0, 0xcf, 0x6, 0x0, 0xcf]
for i in range(37*3):
    op1 = data[i*3]
    op1 = str(op1)
    op2 = data[i*3+1]
    op2 = str(op2)
    code = data[i*3+2]
    if code == 128:
        print("%dmov qword_555555828930[reg[op1]],reg[op2]".replace(
            "op1", op1).replace("op2", op2))
    elif code == 138:
        print('%d pop reg[op1]'.replace('op1', op1).replace('op2', op2) % code)
    elif code == 141:
        print('%d input'.replace('op1', op1).replace('op2', op2) % code)
    elif code == 152:
        print('%d and reg[op1],reg[op2]'.replace(
            'op1', op1).replace('op2', op2) % code)
    elif code == 154:
        print('%d or  reg[op1],reg[op2]'.replace(
            'op1', op1).replace('op2', op2) % code)
    elif code == 159:
        print('%d push reg[op1]'.replace(
            'op1', op1).replace('op2', op2) % code)
    elif code == 163:
        print('%d and reg[op1],op2'.replace(
            'op1', op1).replace('op2', op2) % code)
    elif code == 165:
        print('%d cmp reg[op1],reg[op2]'.replace(
            'op1', op1).replace('op2', op2) % code)
    elif code == 166:
        print('%d move qword_555555828930[reg[op1]],reg[op2]'.replace(
            'op1', op1).replace('op2', op2) % code)
    elif code == 167:
        print('%d shl reg[op1],op2'.replace(
            'op1', op1).replace('op2', op2) % code)
    elif code == 170:
        print('%d add reg[op1],op2'.replace(
            'op1', op1).replace('op2', op2) % code)
    elif code == 171:
        print('%d sub reg[op1],op2'.replace(
            'op1', op1).replace('op2', op2) % code)
    elif code == 185:
        print('%d shl reg[op1],reg[op2]'.replace(
            'op1', op1).replace('op2', op2) % code)
    elif code == 195:
        print('%d jb op1'.replace('op1', op1).replace('op2', op2) % code)
    elif code == 206:
        print('%d mul reg[op1],reg[op2]'.replace(
            'op1', op1).replace('op2', op2) % code)
    elif code == 207:
        print('%d output'.replace('op1', op1).replace('op2', op2) % code)
    elif code == 219:
        print('%d shr reg[op1],reg[op2]'.replace(
            'op1', op1).replace('op2', op2) % code)
    elif code == 230:
        print('%d mov reg[op1],reg[op2]'.replace(
            'op1', op1).replace('op2', op2) % code)
    elif code == 243:
        print('%d or reg[op1],op2'.replace(
            'op1', op1).replace('op2', op2) % code)
    elif code == 250:
        print('%d sub reg[op1],op2'.replace(
            'op1', op1).replace('op2', op2) % code)
    elif code == 5:
        print('%d jmp op1'.replace('op1', op1).replace('op2', op2) % code)
    elif code == 13:
        print('%d cmp reg[op1],op2'.replace(
            'op1', op1).replace('op2', op2) % code)
    elif code == 20:
        print('%d jz  op1'.replace('op1', op1).replace('op2', op2) % code)
    elif code == 43:
        print('%d jnz op1'.replace('op1', op1).replace('op2', op2) % code)
    elif code == 51:
        print('%d shr reg[op1],op2'.replace(
            'op1', op1).replace('op2', op2) % code)
    elif code == 56:
        print('%d mov reg[op1],op2'.replace(
            'op1', op1).replace('op2', op2) % code)
    elif code == 61:
        print('%d mov reg[op1],reg[op2]'.replace(
            'op1', op1).replace('op2', op2) % code)
    elif code == 68:
        print('%d mul reg[op1],op2'.replace(
            'op1', op1).replace('op2', op2) % code)
    elif code == 72:
        print('%d add reg[op1],reg[op2]'.replace(
            'op1', op1).replace('op2', op2) % code)
    elif code == 88:
        print('%d xor reg[op1],reg[op2]'.replace(
            'op1', op1).replace('op2', op2) % code)
    elif code == 107:
        print('%d xor reg[op1],op2'.replace(
            'op1', op1).replace('op2', op2) % code)
    else:
        print('%dnothing recognized!!!' % code)
